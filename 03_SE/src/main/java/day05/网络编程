
Java 网络编程
    网络编程是指编写运行在多个设备（计算机）的程序，这些设备都通过网络连接起来。

    java.net 包中 J2SE 的 API 包含有类和接口，它们提供低层次的通信细节。你可以直接使用这些类和接口，来专注于解决问题，而不用关注通信细节。
    java.net 包中提供了两种常见的网络协议的支持：
    TCP：TCP 是传输控制协议的缩写，它保障了两个应用程序之间的可靠通信。通常用于互联网协议，被称 TCP / IP。
    UDP：UDP 是用户数据报协议的缩写，一个无连接的协议。提供了应用程序之间要发送的数据的数据包。

Socket 编程
    套接字使用TCP提供了两台计算机之间的通信机制。 客户端程序创建一个套接字，并尝试连接服务器的套接字。
    当连接建立时，服务器会创建一个 Socket 对象。客户端和服务器现在可以通过对 Socket 对象的写入和读取来进行通信。
    java.net.Socket 类代表一个套接字，并且 java.net.ServerSocket 类为服务器程序提供了一种来监听客户端，并与他们建立连接的机制。

    以下步骤在两台计算机之间使用套接字建立TCP连接时会出现：
        服务器实例化一个 ServerSocket 对象，表示通过服务器上的端口通信。
        服务器调用 ServerSocket 类的 accept() 方法，该方法将一直等待，直到客户端连接到服务器上给定的端口。
        服务器正在等待时，一个客户端实例化一个 Socket 对象，指定服务器名称和端口号来请求连接。
        Socket 类的构造函数试图将客户端连接到指定的服务器和端口号。如果通信被建立，则在客户端创建一个 Socket 对象能够与服务器进行通信。
        在服务器端，accept() 方法返回服务器上一个新的 socket 引用，该 socket 连接到客户端的 socket。

    连接建立后，通过使用 I/O 流在进行通信，每一个socket都有一个输出流和一个输入流，客户端的输出流连接到服务器端的输入流，而客户端的输入流连接到服务器端的输出流。
    TCP 是一个双向的通信协议，因此数据可以通过两个数据流在同一时间发送

 ServerSocket 类的方法
 服务器应用程序通过使用 java.net.ServerSocket 类以获取一个端口,并且侦听客户端请求。

 ServerSocket 类有四个构造方法：
     序号	                方法描述
     1	public ServerSocket(int port) throws IOException
        创建绑定到特定端口的服务器套接字。

     2	public ServerSocket(int port, int backlog) throws IOException
        利用指定的 backlog 创建服务器套接字并将其绑定到指定的本地端口号。

     3	public ServerSocket(int port, int backlog, InetAddress address) throws IOException
        使用指定的端口、侦听 backlog 和要绑定到的本地 IP 地址创建服务器。

     4	public ServerSocket() throws IOException
        创建非绑定服务器套接字。

 创建非绑定服务器套接字。 如果 ServerSocket 构造方法没有抛出异常，就意味着你的应用程序已经成功绑定到指定的端口，并且侦听客户端请求。

ServerSocket 类的常用方法：
    序号	        方法描述
    1	public int getLocalPort()
        返回此套接字在其上侦听的端口。

    2	public Socket accept() throws IOException
        侦听并接受到此套接字的连接。

    3	public void setSoTimeout(int timeout)
        通过指定超时值启用/禁用 SO_TIMEOUT，以毫秒为单位。

    4	public void bind(SocketAddress host, int backlog)
        将 ServerSocket 绑定到特定地址（IP 地址和端口号）。
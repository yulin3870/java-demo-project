
Java 序列化
    Java 提供了一种对象序列化的机制，该机制中，一个对象可以被表示为一个字节序列，该字节序列包括该对象的数据、有关对象的类型的信息和存储在对象中数据的类型。
    将序列化对象写入文件之后，可以从文件中读取出来，并且对它进行反序列化，也就是说，对象的类型信息、对象的数据，还有对象中的数据类型可以用来在内存中新建对象。
    整个过程都是 Java 虚拟机（JVM）独立的，也就是说，在一个平台上序列化的对象可以在另一个完全不同的平台上反序列化该对象。
    类 ObjectInputStream 和 ObjectOutputStream 是高层次的数据流，它们包含反序列化和序列化对象的方法。

    ObjectOutputStream 类包含很多写方法来写各种数据类型，但是一个特别的方法例外：

        public final void writeObject(Object x) throws IOException
            上面的方法序列化一个对象，并将它发送到输出流。相似的 ObjectInputStream 类包含如下反序列化一个对象的方法：

        public final Object readObject() throws IOException, ClassNotFoundException
            该方法从流中取出下一个对象，并将对象反序列化。它的返回值为Object，因此，你需要将它转换成合适的数据类型。

 请注意，一个类的对象要想序列化成功，必须满足两个条件：
     1）该类必须实现 java.io.Serializable 接口。
     2）该类的所有属性必须是可序列化的。如果有一个属性不是可序列化的，则该属性必须注明是短暂的。
   如果你想知道一个 Java 标准类是否是可序列化的，请查看该类的文档。检验一个类的实例是否能序列化十分简单，
   只需要查看该类有没有实现 java.io.Serializable接口。

DataInputStream
DataOutputStream
	写一个基本类型数据的基本过程
	1:将一个基本类型数据转化为相应的字节
	2:将这些字节有序的写入文件保存

	将程序中的数据转化为对应的字节的过程称之为"序列化"
	这里的第一步实际上就是将基本类型数据进行了序列化,我们称之为"基本类型序列化"

	第二步中我们将数据写入硬盘做长久保存的过程称之为:"数据持久化"

	将字节转换为数据的过程叫"反序列化"

	可以对 对象 进行序列化与反序列化的流
        ObjectInputStream
        读取字节并转换为对象的输入流(反序列化)

        ObjectOutputStream
        将对象转换为字节后并写出的流(序列化)

序列化流与反序列化流
    ObjectOutputStream(序列化流)
    ObjectOutputStream是序列化流，可以将Java程序中的对象写到文件中。

    ObjectOutputStream 构造方法：
        ObjectOutputStream(OutputStream out)：参数要传递字节输出流。

    ObjectOutputStream写对象的方法（特有方法）：
        void writeObject(Object obj)： 向文件中写对象。

    ObjectOutputStream 的使用步骤：
         创建序列化流，用来写。
         调用 writeObject 方法，写对象。
         释放资源。
     tips: 要使用序列化流向文件中写的对象，必须实现 Serializable 接口。

ObjectInputStream(反序列化流)
    ObjectInputStream 是反序列化流， 可以将文件中的对象读取到 Java 程序中。

    ObjectInputStream 的构造方法：
        ObjectInputStream(InputStream in)：参数要传递字节输入流。

    ObjectInputStream 读取对象的方法（特有的方法）：
        Object readObject()： 从文件中读取对象，并将该对象返回。

    反序列化流的使用步骤：
         创建 ObjectInputStream 反序列化流。
         调用 readObject 方法，读取对象。
         释放资源。
    tips：调用 readObject 方法读取对象时，对象所对应的类不存在，那么会报错（ClassNotFoundException）

    特殊情况:
    被 static 修饰的成员变量无法序列化，无法写到文件。
    如果不希望某个成员变量写到文件，同时又不希望使用 static 关键字， 那么可以使用 transient。
    transient 关键字表示瞬态，被 transient 修饰的成员变量无法被序列化。

Java 流(Stream)、文件(File)和IO
    Java.io 包几乎包含了所有操作输入、输出需要的类。所有这些流类代表了输入源和输出目标。
    Java.io 包中的流支持很多种格式，比如：基本类型、对象、本地化字符集等等。
    一个流可以理解为一个数据的序列。输入流表示从一个源读取数据，输出流表示向一个目标写数据。
    Java 为 I/O 提供了强大的而灵活的支持，使其更广泛地应用到文件传输和网络编程中。

读取控制台输入
    Java 的控制台输入由 System.in 完成。
    为了获得一个绑定到控制台的字符流，你可以把 System.in 包装在一个 BufferedReader 对象中来创建一个字符流。
        下面是创建 BufferedReader 的基本语法：
            BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedReader 对象创建后，我们便可以使用 read() 方法从控制台读取一个字符，或者用 readLine() 方法读取一个字符串。
        从控制台读取多字符输入
        从 BufferedReader 对象读取一个字符要使用 read() 方法，它的语法如下：
            int read( ) throws IOException
        每次调用 read() 方法，它从输入流读取一个字符并把该字符作为整数值返回。 当流结束的时候返回 -1。该方法抛出 IOException。

从控制台读取字符串
    从标准输入读取一个字符串需要使用 BufferedReader 的 readLine() 方法。
    它的一般格式是：  String readLine( ) throws IOException

控制台输出
    在此前已经介绍过，控制台的输出由 print( ) 和 println() 完成。这些方法都由类 PrintStream 定义，System.out 是该类对象的一个引用。
    PrintStream 继承了 OutputStream类，并且实现了方法 write()。这样，write() 也可以用来往控制台写操作。
    PrintStream 定义 write() 的最简单格式如下所示：
        void write(int byteval)
    该方法将 byteval 的低八位字节写到流中。

FileInputStream
    该流用于从文件读取数据，它的对象可以用关键字 new 来创建。
    有多种构造方法可用来创建对象。
    可以使用字符串类型的文件名来创建一个输入流对象来读取文件：
        InputStream f = new FileInputStream("C:/java/hello");
    也可以使用一个文件对象来创建一个输入流对象来读取文件。我们首先得使用 File() 方法来创建一个文件对象：
        File f = new File("C:/java/hello");
        InputStream out = new FileInputStream(f);

FileOutputStream
    该类用来创建一个文件并向文件中写数据。
    如果该流在打开文件进行输出前，目标文件不存在，那么该流会创建该文件。
    有两个构造方法可以用来创建 FileOutputStream 对象。
    使用字符串类型的文件名来创建一个输出流对象：
        OutputStream f = new FileOutputStream("C:/java/hello")
    也可以使用一个文件对象来创建一个输出流来写文件。我们首先得使用File()方法来创建一个文件对象：
        File f = new File("C:/java/hello");
        OutputStream f = new FileOutputStream(f);

文件和I/O
    关于文件和I/O的类
        File Class(类)
        FileReader Class(类)
        FileWriter Class(类)

Java中的目录
    创建目录：
        File类中有两个方法可以用来创建文件夹：
            mkdir( )方法创建一个文件夹，成功则返回true，失败则返回false。
                失败表明File对象指定的路径已经存在，或者由于整个路径还不存在，该文件夹不能被创建。
            mkdirs()方法创建一个文件夹和它的所有父文件夹。

    读取目录：
        一个目录其实就是一个 File 对象，它包含其他文件和文件夹。
        如果创建一个 File 对象并且它是一个目录，那么调用 isDirectory() 方法会返回 true。
        可以通过调用该对象上的 list() 方法，来提取它包含的文件和文件夹的列表。

    删除目录或文件：
        删除文件可以使用 java.io.File.delete() 方法。
        以下代码会删除目录 /tmp/java/，需要注意的是当删除某一目录时，必须保证该目录下没有其他文件才能正确删除，否则将删除失败。



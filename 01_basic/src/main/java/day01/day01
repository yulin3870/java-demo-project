
 Linux 是操作系统，与 Windows相当
 学习Linux 命令 
  
  pwd: 打印当前工作目录(文件夹)
  ls：默认显示当前工作目录内容
  cd：改变当前工作目录
    如：cd .. 返回上一层目录（..是当前目录的父(上层)目录）
  cp: 复制文件、文件夹
    如：cp 文件名 文件名
  mkdir：  创建文件夹命令
  rm： 删除文件、文件夹
           删除文件：rm file file file ....
           删除文件夹：rm -rf dir dir dir ...
  mv： 移动或者改名
  
 Java 运行原理
  Java 编程语言，解决了人类的思考逻辑与计算机处理方式之间
  差异！
  
  1）计算机可以处理一切数据计算逻辑
  2) 编程语言可以将人类的业务问题映射为数据计算逻辑。
  
  Java的运行原理
  1）编辑Java源文件（.java）， 是接近于人类语言
  2) 编译为.class文件，是字节码，是虚拟机机器语言
  3）利用虚拟机，将class(字节码)翻译为机器语言(数据计算)
  
 JDK
  |-- 开发工具 是生成(.class) 
  |-- JRE 
       |—- 类库（.class）
       |-- JVM 
       
 Java 的开发环境 
 JDK + Eclipse
 JDK 的版本：Java 7 
  Java 6 == java 1.6 
  Java 5 == java 1.5
  
  OS64 + Java 64 + Eclispe(标准版) 64 
  OS64 + Java 32 + Eclispe(标准版) 32 
  OS32 + Java 32 + Eclispe(标准版) 32 
       
Java 的变量 
  1) 在逻辑上是一个代词
  2) 在计算机内部，代表一个数据。
 
Java是强类型语言：变量是强类型的
  1）变量必须用明确类型声明。
  2）变量必须初始化以后才能使用。
  3）变量有作用域，离开作用域就回收
  4）变量不能重复定义
 
 违反了就有编译“错误”
 
 
进制基础
 数学：计数的规律
 10进制：是逢10进1 的计数规则
 权：10000 1000 100 10 1 每个数位上代表1的个数
 基数：10  进位规律
 数字：0 1 2 3 4 5 6 7 8 9
 权是基数的n次幂
 
 2进制: 是逢2进1 的计数规则
 权：128 64 32 16 8 4 2 1 每个数位上代表1的个数
 基数：2  进位规律
 数字：0 1
 权是基数的n次幂
  
  10   2
  0    0
  1    1
  2   10
  3   11
  4  100
  5  101
  6  110
  7  111
  8 1000
  9 1001
 10 1010
 11 1011
 12 1100
 13 1101
 14 1110
 15 1111
 
 11000000(2) = 128 + 64 = 192(10) 
 11000101(2) = 128 + 64 + 4+1 = 197(10)
 
 234(10) = ?(2) = 11101010(2) 
 
                128 64 32 16 8 4 2 1
 234(10) =  1    1   1  1  0 1 0 1 0 (2)
                106 42 10  0 2 0 1 0
 
 201(10) = ?(2) = 11001001（2）
 218(10) = ?(2) = 11011010（2）	
 188(10) = ?(2) = 10111100（2）
 
 补码：为了成本考虑，解决负数问题，利用大数作为负数使用。
 一种算法规定：以4位补码为例。
 4位补码规定：
 1）高位为1的数作为负数使用
 2）计算时候如果超过4位，自动溢出舍弃
 3) 补码是有范围的数：-8 ~ 7 不能表示超范围数字
 4）在不超过范围情况下，补码满足数学运算，避免进行溢出计算
 5）补码有对称现象, 不是数学现象！
 “~” 取反运算，就是翻转0 1

   ~0=-1, ~1=-2, ~2=-3 ...  ~n = -(n+1) 
   => ~n = -(n+1) 
   => ~n = -n -1
   => 1+~n = -n (大学讲的补码公式！)
   
   根据 1+~n = -n 可以快速，计算负数补码
   6 的补码 0110 => 取反 1001 => 加1 1010 

  10   2
 -8 1000
 -7 1001
 -6 1010
 -5 1011
 -4 1100
 -3 1101
 -2 1110 + 1 = 1111  数学上 ？+ 1 = -1
 -1 1111 + 1 = 0000  数学上 ？+ 1 = 0
  0 0000
  1 0001               
  2 0010         -3 + -3 = ？
  3 0011          
  4 0100          -3  1101
  5 0101          -3  1101
  6 0110        +    11 1  
  7 0111        ------------- 
                  -6  1010     
  
 补码的高位数推广, 推广范围
  10 4补  8位补码(byte) 32位(int)
min  --- ---------  10000000 00000000 00000000 00000000
min -1              10000000 00000000 00000000 00000001
....                .... 
-129      --------  11111111 11111111 11111111 01111111 
-128      10000000  11111111 11111111 11111111 10000000
-127      10000001  11111111 11111111 11111111 10000001
-126      10000010 
....                ....
-10 ----  11110110
 -9 ----  11110111  
 -8 1000  11111000
 -7 1001  11111001
 -6 1010  11111010
 -5 1011  11111011
 -4 1100  11111100
 -3 1101  11111101
 -2 1110  11111110
 -1 1111  11111111  11111111 11111111 11111111 11111111
  0 0000  00000000  00000000 00000000 00000000 00000000
  1 0001  00000001  00000000 00000000 00000000 00000001              
  2 0010  00000010
  3 0011  00000011        
  4 0100  00000100       
  5 0101  00000101      
  6 0110  00000110  
  7 0111  00000111
  8 ----  00001000
  9 ----  00001001
 10 ----  00001010
 ...----  ...
126 ----  01111110 
127 ----  01111111   00000000 00000000 00000000 01111111
128 ---- ---------   00000000 00000000 00000000 10000000
... 
                     01111111 11111111 11111111 11111110
max       --------   01111111 11111111 11111111 11111111
        
关于Java的补码         
 1）Java 中数是补码，补码有正数也有负数
    （负数高位为1，整数高位是0，高位也称为符号位）
 2) Java采用补码计算，注意计算范围，避免超范围计算，避免溢出
 3）记住关键数字： -1  0  max  min 的补码
 int 
  -1 : 11111111 11111111 11111111 11111111  （常用数字）
  0  ：０００00000000 00000000 00000000 00000000
  min: 10000000 00000000 00000000 00000000
  max: 01111111 11111111 11111111 11111111 
 
 4)记住推论 ：-n = ~n+1  =>  -n-1 = ~n
   System.out.println(~-6); // ~-6 = -(-6)-1 = 5
 5) 16进制，是2进制的简写形式。
    是2进制每4位对应一位的简写。
    本质上16进制就是2进制
    
 -1 : 11111111 11111111 11111111 11111111  （常用数字）
         f   f    f   f    f   f    f   f
  0  ：０００00000000 00000000 00000000 00000000
          0   0    0   0    0   0    0   0              
  min: 10000000 00000000 00000000 00000000
          8   0    0   0    0   0    0   0 
  max: 01111111 11111111 11111111 11111111 
          7   f    f   f    f   f    f   f
    
 16进制: 是逢16进1 的计数规则
 权：256 16 1 每个数位上代表1的个数
 基数：16  进位规律
 数字：0 1 2 3 4 5 6 7 8 9 a b c d e f 
 权是基数的n次幂
     
    141(16) = 1*256 + 4*16 + 1 = 321(10) 
    
  10    16           2 
   0    00   0000 0000 
   1    01   0000 0001
   2    02   0000 0010
   3    03   0000 0011
   4    04   0000 0100
   5    05   0000 0101
   6    06   0000 0110
   7    07   0000 0111
   8    08   0000 1000
   9    09   0000 1001
  10    0a   0000 1010
  11    0b   0000 1011
  12    0c   0000 1100
  13    0d   0000 1101
  14    0e   0000 1110
  15    0f   0000 1111
  16    10   0001 0000
  17    11   0001 0001
  18    12   0001 0010
  ...
  65    41   0100 0001
  66    42   0100 0010
  ...   
 192    c0   1100 0000
 193    c1   1100 0001
 ... 
 255    ff   1111 1111
 


Java 循环结构 - for, while 及 do...while
    顺序结构的程序语句只能被执行一次。如果您想要同样的操作执行多次,，就需要使用循环结构。
    Java中有三种主要的循环结构：
        1)while 循环
        2)do…while 循环
        3)for 循环

while 循环
    while是最基本的循环，它的结构为：
        while( 布尔表达式 ) {
          //循环内容
        }

do…while 循环
    对于 while 语句而言，如果不满足条件，则不能进入循环。但有时候我们需要即使不满足条件，也至少执行一次。
    do…while 循环和 while 循环相似，不同的是，do…while 循环至少会执行一次。
        do {
            //代码语句
        }while(布尔表达式);

     注意：布尔表达式在循环体的后面，所以语句块在检测布尔表达式之前已经执行了。
        如果布尔表达式的值为 true，则语句块一直执行，直到布尔表达式的值为 false。

for循环
    for循环执行的次数是在执行前就确定的。语法格式如下：
        for(初始化; 布尔表达式; 更新) {
            //代码语句
        }
    关于 for 循环有以下几点说明：
        最先执行初始化步骤。可以声明一种类型，但可初始化一个或多个循环控制变量，也可以是空语句。
        然后，检测布尔表达式的值。如果为 true，循环体被执行。如果为false，循环终止，开始执行循环体后面的语句。
        执行一次循环后，更新循环控制变量。
        再次检测布尔表达式。循环执行上面的过程。

Java 增强 for 循环
    Java 增强 for 循环语法格式如下:
        for(声明语句 : 表达式)
        {
           //代码句子
        }
    声明语句：声明新的局部变量，该变量的类型必须和数组元素的类型匹配。其作用域限定在循环语句块，其值与此时数组元素的值相等。
    表达式：表达式是要访问的数组名，或者是返回值为数组的方法。

break 关键字
    break 主要用在循环语句或者 switch 语句中，用来跳出整个语句块。
    break 跳出最里层的循环，并且继续执行该循环下面的语句。

continue 关键字
    continue 适用于任何循环控制结构中。作用是让程序立刻跳转到下一次循环的迭代。
    在 for 循环中，continue 语句使程序立即跳转到更新语句。
    在 while 或者 do…while 循环中，程序立即跳转到布尔表达式的判断语句。

for while do...while 比较
    1) for 常用，“经典使用方式”与固定次数有关循环处理
    2) for 可以替代其它两种循环
        2.1) for(;循环条件;){} 替代 while(循环条件){}
        2.2) 死循环 for(;;){} 替代  while(true){}
        2.3) for(;;){ if(循环条件) break; } 替代 do...while(循环条件);有些程序员只使用for解决问题
    3) while 循环用于在循环体开始时候判断循环条件
    4) do ... while 循环用于在循环体结束时候判断循环条件
    5) 在其他情况下使用 死循环！在适当的条件时候使用break
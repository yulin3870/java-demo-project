
Java异常结构中定义有Throwable类

在其下有两个子类
1：Error:			jvm级别的错误  	Java运行时环境出现的错误
						例如：栈内存溢出等

2：Exception:	程序级别的错误
						由于网络故障、文件损坏、设备错误、用户输入非法等情况导致的异常
							可以通过捕获机制来解决

    1）try语句
        try{
            可能出现异常的代码片段
        ｝

    try语句用来包围可能出现异常的代码片段
        try是发现问题的语句

    2）catch语句
        cat(Exception_Type){
            解决问题的代码片段
        }

    catch语句是用来捕获try语句中出现的异常，并针对该异常解决的。catch语句可以出现多次

3）throw 用来主动抛出某一个异常的实例
	通常遇到以下情况会主动抛出异常：

    1：我们定义的方法在运行过程中出现了错误,
        而这个错误如何解决应该由调用者决定时，我们会将异常抛出

    2：当我们遇到一个不符合业务逻辑的操作时，我们可以把它当作一个异常去处理，而出动抛出

4）throws声明
	 我们定义的方法中可能会出现错误，无论是否为我们主动抛出的，但只要是方法中出现的异常
	不在方法中处理的，我们通常在声明方法时同时声明可能会抛出的异常，通知调用者必须捕获。


5）finally块
	finally{
		代码片段
	}

    finally出现在try之后


6）重写方法时的异常处理
	若父类发中通过theows声明了某些异常的抛出
	那么：
	1：子类重写时可以不声明throws
	2：子类重写时可以抛出父类抛出的异常的子类异常

	举例：父类方法 throws RuntimeException
		子类可以：
				throws NullPointerException

	3：子类重写时可以只抛出父类抛出的部分异常

	但是不能：
        1：子类重写时不能抛出父类方法中没有抛出的额外异常

        2：子类重写时不能抛出父类方法中抛出的异常的父类异常
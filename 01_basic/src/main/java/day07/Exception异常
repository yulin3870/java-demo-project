
Java 异常处理
    异常是程序中的一些错误，但并不是所有的错误都是异常，并且错误有时候是可以避免的。
    比如说，你的代码少了一个分号，那么运行出来结果是提示是错误 java.lang.Error；
    如果你用System.out.println(11/0)，那么你是因为你用0做了除数，会抛出 java.lang.ArithmeticException 的异常。
        异常发生的原因有很多，通常包含以下几大类：
            用户输入了非法数据。
            要打开的文件不存在。
            网络通信时连接中断，或者JVM内存溢出。
            这些异常有的是因为用户错误引起，有的是程序错误引起的，还有其它一些是因为物理错误引起的。-
            要理解Java异常处理是如何工作的，你需要掌握以下三种类型的异常：

        检查性异常：最具代表的检查性异常是用户错误或问题引起的异常，这是程序员无法预见的。
            例如要打开一个不存在文件时，一个异常就发生了，这些异常在编译时不能被简单地忽略。
        运行时异常： 运行时异常是可能被程序员避免的异常。与检查性异常相反，运行时异常可以在编译时被忽略。
        错误： 错误不是异常，而是脱离程序员控制的问题。错误在代码中通常被忽略。例如，当栈溢出时，一个错误就发生了，它们在编译也检查不到的。

Exception 类的层次
    所有的异常类是从 java.lang.Exception 类继承的子类。
    Exception 类是 Throwable 类的子类。除了Exception类外，Throwable还有一个子类Error 。
    Java 程序通常不捕获错误。错误一般发生在严重故障时，它们在Java程序处理的范畴之外。
    Error 用来指示运行时环境发生的错误。
    例如，JVM 内存溢出。一般地，程序不会从错误中恢复。
    异常类有两个主要的子类：IOException 类和 RuntimeException 类。

Java 内置异常类
    Java 语言定义了一些异常类在 java.lang 标准包中。
    标准运行时异常类的子类是最常见的异常类。由于 java.lang 包是默认加载到所有的 Java 程序的，所以大部分从运行时异常类继承而来的异常都可以直接使用。

捕获异常
    使用 try 和 catch 关键字可以捕获异常。try/catch 代码块放在异常可能发生的地方。
    try/catch代码块中的代码称为保护代码，使用 try/catch 的语法如下：
        try
        {
           // 程序代码
        }catch(ExceptionName e1)
        {
           //Catch 块
        }
    Catch 语句包含要捕获异常类型的声明。当保护代码块中发生一个异常时，try 后面的 catch 块就会被检查。
    如果发生的异常包含在 catch 块中，异常会被传递到该 catch 块，这和传递一个参数到方法是一样。

多重捕获块
    一个 try 代码块后面跟随多个 catch 代码块的情况就叫多重捕获。
    多重捕获块的语法如下所示：
        try{
           // 程序代码
        }catch(异常类型1 异常的变量名1){
          // 程序代码
        }catch(异常类型2 异常的变量名2){
          // 程序代码
        }catch(异常类型2 异常的变量名2){
          // 程序代码
        }
    上面的代码段包含了 3 个 catch块。
    可以在 try 语句后面添加任意数量的 catch 块。
    如果保护代码中发生异常，异常被抛给第一个 catch 块。
    如果抛出异常的数据类型与 ExceptionType1 匹配，它在这里就会被捕获。
    如果不匹配，它会被传递给第二个 catch 块。
    如此，直到异常被捕获或者通过所有的 catch 块。

throws/throw 关键字：
    如果一个方法没有捕获到一个检查性异常，那么该方法必须使用 throws 关键字来声明。throws 关键字放在方法签名的尾部。
    也可以使用 throw 关键字抛出一个异常，无论它是新实例化的还是刚捕获到的。
    一个方法可以声明抛出多个异常，多个异常之间用逗号隔开。

finally关键字
    finally 关键字用来创建在 try 代码块后面执行的代码块。
    无论是否发生异常，finally 代码块中的代码总会被执行。
    在 finally 代码块中，可以运行清理类型等收尾善后性质的语句。
    finally 代码块出现在 catch 代码块最后，语法如下：
        try{
          // 程序代码
        }catch(异常类型1 异常的变量名1){
          // 程序代码
        }catch(异常类型2 异常的变量名2){
          // 程序代码
        }finally{
          // 程序代码
        }

注意下面事项：
    catch 不能独立于 try 存在。
    在 try/catch 后面添加 finally 块并非强制性要求的。
    try 代码后不能既没 catch 块也没 finally 块。
    try, catch, finally 块之间不能添加任何代码。

声明自定义异常
    在 Java 中你可以自定义异常。编写自己的异常类时需要记住下面的几点。
    所有异常都必须是 Throwable 的子类。
    如果希望写一个检查性异常类，则需要继承 Exception 类。
    如果你想写一个运行时异常类，那么需要继承 RuntimeException 类。
    可以像下面这样定义自己的异常类：
        class MyException extends Exception{
        }
    只继承Exception 类来创建的异常类是检查性异常类。
    一个异常类和其它任何类一样，包含有变量和方法。

通用异常
    在Java中定义了两种类型的异常和错误。
        JVM(Java虚拟机) 异常：由 JVM 抛出的异常或错误。例如：NullPointerException 类，ArrayIndexOutOfBoundsException 类，ClassCastException 类。
        程序级异常：由程序或者API程序抛出的异常。例如 IllegalArgumentException 类，IllegalStateException 类。
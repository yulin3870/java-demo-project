Java 日期时间
    java.util 包提供了 Date 类来封装当前的日期和时间。 Date 类提供两个构造函数来实例化 Date 对象。
    第一个构造函数使用当前日期和时间来初始化对象。
        Date( )
    第二个构造函数接收一个参数，该参数是从1970年1月1日起的毫秒数。
        Date(long millisec)

    Date对象创建以后，可以调用下面的方法。
        序号	方法和描述
        1	boolean after(Date date)
        若当调用此方法的Date对象在指定日期之后返回true,否则返回false。
        2	boolean before(Date date)
        若当调用此方法的Date对象在指定日期之前返回true,否则返回false。
        3	Object clone( )
        返回此对象的副本。
        4	int compareTo(Date date)
        比较当调用此方法的Date对象和指定日期。两者相等时候返回0。调用对象在指定日期之前则返回负数。调用对象在指定日期之后则返回正数。
        5	int compareTo(Object obj)
        若obj是Date类型则操作等同于compareTo(Date) 。否则它抛出ClassCastException。
        6	boolean equals(Object date)
        当调用此方法的Date对象和指定日期相等时候返回true,否则返回false。
        7	long getTime( )
        返回自 1970 年 1 月 1 日 00:00:00 GMT 以来此 Date 对象表示的毫秒数。
        8	int hashCode( )
         返回此对象的哈希码值。
        9	void setTime(long time)
        用自1970年1月1日00:00:00 GMT以后time毫秒数设置时间和日期。
        10	String toString( )
        把此 Date 对象转换为以下形式的 String： dow mon dd hh:mm:ss zzz yyyy 其中： dow 是一周中的某一天 (Sun, Mon, Tue, Wed, Thu, Fri, Sat)。

日期比较
    Java使用以下三种方法来比较两个日期：
        使用 getTime() 方法获取两个日期（自1970年1月1日经历的毫秒数值），然后比较这两个值。
        使用方法 before()，after() 和 equals()。例如，一个月的12号比18号早，则 new Date(99, 2, 12).before(new Date (99, 2, 18)) 返回true。
        使用 compareTo() 方法，它是由 Comparable 接口定义的，Date 类实现了这个接口。

使用 SimpleDateFormat 格式化日期
    SimpleDateFormat 是一个以语言环境敏感的方式来格式化和分析日期的类。SimpleDateFormat 允许你选择任何用户自定义日期时间格式来运行。
    例：Date date = new Date( );
        SimpleDateFormat ft = new SimpleDateFormat ("yyyy-MM-dd hh:mm:ss");
        ft.format(date);
    yyyy 是完整的公元年，MM 是月份，dd 是日期，HH:mm:ss 是时、分、秒

Calendar类
    使用Calendar 类设置和获取日期数据的特定部分呢，比如说小时，日，或者分钟。
    Calendar类是一个抽象类，在实际使用时实现特定的子类的对象，创建对象的过程对程序员来说是透明的，只需要使用getInstance方法创建即可。

    创建一个代表系统当前日期的Calendar对象
        Calendar c = Calendar.getInstance();//默认是当前日期
    创建一个指定日期的Calendar对象
        使用Calendar类代表特定的时间，需要首先创建一个Calendar的对象，然后再设定该对象中的年月日参数来完成。
        //创建一个代表2009年6月12日的Calendar对象
        Calendar c1 = Calendar.getInstance();
        c1.set(2009, 6, 12);

Calendar类对象字段类型
    Calendar类中用以下这些常量表示不同的意义。
        常量	                        描述
        Calendar.YEAR	                年份
        Calendar.MONTH	                月份
        Calendar.DATE	                日期
        Calendar.DAY_OF_MONTH	    日期，和上面的字段意义完全相同
        Calendar.HOUR	            12小时制的小时
        Calendar.HOUR_OF_DAY	    24小时制的小时
        Calendar.MINUTE	                分钟
        Calendar.SECOND	                秒
        Calendar.DAY_OF_WEEK	        星期几

Java 中的时间
   1） 是一个long类型是整数, 是GMT 1970元旦到现在累计的毫秒数

   2) java.util.Date 封装了公元历法 算法

  Date { long  + 公元历法 算法}
     缺点: y2k 千年问题, 以及地区和国家问题 不适合时间计算

     替代方案: 	Calendar  地区和国家问题 适合时间计算

  3) Date API 方法:
      getYear(); 有2000年问题, 返回2位数年份

      如:  1998 返回  98    1999 返回 99
         	 2000 返回  100   2013 返回 113
       	 	 98 + 1900  = 1998
          	 99 + 1900  = 1999
         	100 + 1900  = 2000

    getMonth();
    getDay()
    getTime() 			返回的是 long 毫秒数
    setTime(long) 修改时间毫秒数

   测试案例:

    1) 当前时间测试

    2) 时间原点(long 0)测试
       setTime(0)

    3) 思考如何表示明天?
      明天 = 今天毫秒数 + 一天毫秒数
       setTime(明天)

 4) SimpleDateFormat 日期时间输出的工具类, 非常方便

  SimpleDateFormat fmt = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

   5) 时间的计算的原理: 是毫秒数的 + - 与历法规则有关!

<一＞Object

  	1）类默认继承于Object, 所以类的最终父类型是Obejct
    	 体现: 一切皆对象
     Object 定义的变量可以引用任何类型的实例
     Object 称为继承根.

	2) Object 定义了很多基本方法, 被子类型继承

   toString() 建议重写, 返回这个对象的文本描述

   equsle()   建议重写, 比较两个对象是否相等

      	 == 只能比较变量值, 不能用于比较对象是否相等.

    hashCode() 建议与equals一起重写.
       当两个对象相等时候, hashCode()返回值一样
       当两个对象不相等时候, hashCode()返回值尽量不同

＜二＞String 字符串
  1) 是系统核心的数据输入输出类! 凡是界面上的文本信息都是  String.

  int a = 120;
  System.out.println(a);//"120"
  System.out.println(String.valueOf(a));

  2) 字符串对象是不可改变的!	(String使用不变模式设计)

  3) 字符串的内部结构
     String{ char[]  + char[] 有关的算法! }
     完全可以
     {char[] + 算法} 替代 String API 方法
                 可以优化很快        				  性能很好
    				   编码量大           			  编码简洁

     Tetromino {Cell[]  + Cell[] 算法 }

     Stack(数据 + 数据算法)

  4) "静态字符串"的优化现象

    4.1) "静态字符串" 字面量, 常量, 和字面量常量的表达式
      		注意: 字面量常量的表达式在编译期间运算, 优化为字面量

    4.2) 动态字符串, 都是在运算期间堆中创建,不参与静态优化
      		动态字符串: 使用new运算创建, 变量连接结果

  典型试题:
    String s = new String("ABC"+"123");
    如上代码描述正确的是:
     A 运行期间会创建两个字符串对象
     B 运行期间会创建两个对象
     C 运行期间会创建一个字符串对象
     D 运行期间会创建一个个对象

  5) 字符串常用API方法(算法)
    length() 返回字符串的长度
    charAt()
    toUpperCase()	返回字符串的大写形式
    indexOf()
    endsWith()
    startsWith()
    substring()
    trim()

< 四>正则表达式:

   1) 是字符串的检索匹配规则
   如:
  	regex(匹配规则): hi
	被检索的文本(字符串): hi, i am tom in china
	检索结果:
	Found "hi" starting index 0 ending index 2
	Found "hi" starting index 17 ending index 19

   2) 正则表达式使用广泛: eclipse linux java c# PHP...

   3) 是字符序列匹配规则
    如: hi  表示匹配两个字符的序列, 第一个是h第二个i

   4) 字符集: 匹配多个字符的某一个
    	如: h[ijk] 表示匹配两个字符的序列, 第一个是h第二个i/j/k
      	 [0123456789] 表示匹配1个字符, 是数字字符

    数字字符集: [0123456789] == [0-9] == \d

    检索邮政编码:
       [0-9][0-9][0-9][0-9][0-9][0-9]
       \d\d\d\d\d\d

    预定义(缩写)字符集
       \d 数字字符
       \w 单词字符 == [a-zA-Z0-9_]
       \s 空白字符
     				  .	  任意一个字符

       \D 非数字
       \S 非空白
       \W 非单词字符

   5) 数量词
     X{n}    n个X
     X{n,m}  n到m个X
     X{n,}   n个以上X

     缩写(预定义) 数量词
     		 ?  ==  {0,1}
      		+  ==  {1,}
      		*   ==  {0,}

   6) 边界匹配
    		 ^ 字符串开始
   			  $ 字符串结束


  详细参考: java.util.regex.Pattern

    7) 正则表达式的应用:
      表单验证:
      用户名规则: 从头到尾连续8~10个单词字符
         正则规则: ^\w{8,10}$

                  ^\d{11}$
         IP地址规则: \d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}
                     \d{1,3}(\.\d{1,3}){3}

         电话号码:  +86 15601035818
               ^(\+86)?\s+\d{11}$
               ^(\+86)?\s*\d{11}$

              测试案例: 15601035818
                      	 +8615601035818
                       	+86 15601035818
                       	+86  15601035818


    8)	 分组()

    9) 	特殊字符转义
     	 匹配 .   使用 \.
      	 匹配 [   使用 \[
    	 匹配 |    使用 \|
      	 匹配 \  使用 \\

 10) java String 中 对正则表达式的支持
    matches(正则表达式)

     将一个字符串与正则表达式进行匹配, 如果匹配成功就返回true, 否则返回false

     String name = "hi1234";
     boolean pass = name.matches("^\\w{8,10}$"); false

    11）字符串拆分
      数据: "5, tom, 5, tom@tom.com, 119"
      拆分为: ["5", "tom", "5", "tom@tom.com", "119"]

      str.split(",\\s?")

 12) String  matches  split  replaceAll


 StringBuilder 可变字符串
 String 				是不可变的字符串

 String {char[]  + 算法(不改变内容, 经常返回新字符串) }

 StringBuilder{char[] + 算法(改变了char[]的内容, 当容量不足时候, 还进行扩容操作)}

 Tetromino {Cell[]  +  算法}

 <五>StringBuilder 类的总结

 	1) Java 的字符串连接的过程是利用 StringBuilder实现的
   String s = "AB";
   String s1 = s+"DE";
   //String s1=new StringBuilder(s).append("DE").toString()

   s1 += "De";
   s1 += "De";
   s1 += "De";
   s1 += "De";

 	2) 建议在大量字符串计算时候利用 StringBuilder 完成.
   		简单说: StringBuilder 的性能好于 String

    3) 如下情形, 不需要使用StringBuilder

  3.1) 一行的连接运算,Java会使用一个StringBuilder实现
   ss = s1+s2+s3+s4;
   //ss = new StringBuilder(s1).append(s2)
   //     .append(s3).append(s4).toString();

  3.2) 静态字符串的连接
   String sql = "select boy from man "+
      " where age<28 and age>20 "+
      " and salary>10000";

 	StringBuffer PK StringBuilder
 	比较: StringBuffer 早于 StringBuilder(快)
  StringBuffer 是线程安全的,同步处理的, 性能稍慢
  StringBuilder 是非线程安全的,并发处理的, 性能稍快

<六>字符串总结
 1) Java 中代表字符串的有:  char[]  String  StringBuilder

 2) char[] 只是字符数据, 没有算法, 可以自己实现.
    	如果优化的好, 性能最优! 开发效率低

 3) String 是不可变字符串, 是最常用的字符串, 界面文本数据
  		 就是使用 String输出的. API经常返回新String对象, 性能 稍差.

   如: System.out.println(120)
     实际上 System.out.println(String.valueOf(120));

 4) StringBuilder 是可变字符串, 字符串的内容计算, 建议采用
   StringBuilder实现. 性能好.

Java 运算符
    1)算术运算符
    2)关系运算符
    3)位运算符
    4)逻辑运算符
    5)赋值运算符
    6)其他运算符

算术运算符
    实例假设整数变量A的值为10，变量B的值为20
      操作符	          描述	                         例子
        +	    加法 - 相加运算符两侧的值	         A + B 等于 30
        -	    减法 - 左操作数减去右操作数	         A – B 等于 -10
        *	    乘法 - 相乘操作符两侧的值	         A * B等于200
        /	    除法 - 左操作数除以右操作数 	     B / A等于2
        ％	    取余 - 左操作数除以右操作数的余数	 B%A等于0
        ++	    自增: 操作数的值增加1	             B++ 或 ++B 等于 21
        --	    自减: 操作数的值减少1	             B-- 或 --B 等于 19

自增自减运算符
    1、自增（++）自减（--）运算符是一种特殊的算术运算符，在算术运算符中需要两个操作数来进行运算，而自增自减运算符是一个操作数。
    2、前缀自增自减法(++a,--a): 先进行自增或者自减运算，再进行表达式运算。
        int a = 3; int b = ++a; 拆分运算过程为: a=a+1=4; b=a=4, 最后结果为b=4,a=4
    3、后缀自增自减法(a++,a--): 先进行表达式运算，再进行自增或者自减运算
        int c = 3; int d = c--; 拆分运算过程为: d=c=3; c=c-1=2, 最后结果为d=3,c=2

关系运算符
    实例整数变量A的值为10，变量B的值为20：
       运算符	                    描述	                                             例子
        ==	    检查如果两个操作数的值是否相等，如果相等则条件为真。	            （A == B）为假。
        !=	    检查如果两个操作数的值是否相等，如果值不相等则条件为真。	         (A != B) 为真。
        > 	    检查左操作数的值是否大于右操作数的值，如果是那么条件为真。	        （A> B）为假。
        < 	    检查左操作数的值是否小于右操作数的值，如果是那么条件为真。	        （A <B）为真。
        >=	    检查左操作数的值是否大于或等于右操作数的值，如果是那么条件为真。	（A> = B）为假。
        <=	    检查左操作数的值是否小于或等于右操作数的值，如果是那么条件为真。	（A <= B）为真。

位运算符
    Java定义了位运算符，应用于整数类型(int)，长整型(long)，短整型(short)，字符型(char)，和字节型(byte)等类型。
    位运算符作用在所有的位上，并且按位运算。假设a = 60，b = 13;它们的二进制格式表示将如下：
        A = 0011 1100
        B = 0000 1101
        -----------------
        A&B = 0000 1100
        A | B = 0011 1101
        A ^ B = 0011 0001
        ~A= 1100 0011
    下表列出了位运算符的基本运算，假设整数变量 A 的值为 60 和变量 B 的值为 13：
        操作符	                    描述	                                        例子
          ＆	如果相对应位都是1，则结果为1，否则为0	                （A＆B），得到12，即0000 1100
          |	    如果相对应位都是 0，则结果为 0，否则为 1	            （A | B）得到61，即 0011 1101
          ^	    如果相对应位值相同，则结果为0，否则为1	                （A ^ B）得到49，即 0011 0001
          〜	按位取反运算符翻转操作数的每一位，即0变成1，1变成0。	（〜A）得到-61，即1100 0011
          << 	按位左移运算符。左操作数按位左移右操作数指定的位数。	 A << 2得到240，即 1111 0000
          >> 	按位右移运算符。左操作数按位右移右操作数指定的位数。	 A >> 2得到15即 1111
          >>> 	按位右移补零操作符。左操作数的值按右操作数指定的位数右移，移动得到的空位以零填充。	A>>>2得到15即0000 1111

逻辑运算符
    假设布尔变量A为真，变量B为假
    操作符	                            描述	                                                            例子
      &&	 称为逻辑与运算符。当且仅当两个操作数都为真，条件才为真。	                                （A && B）为假。
     | |	 称为逻辑或操作符。如果任何两个操作数任何一个为真，条件为真。	                            （A | | B）为真。
      ！	 称为逻辑非运算符。用来反转操作数的逻辑状态。如果条件为true，则逻辑非运算符将得到false。	！（A && B）为真。

赋值运算符
    操作符	                            描述	                                            例子
      =	        简单的赋值运算符，将右操作数的值赋给左侧操作数	                C = A + B将把A + B得到的值赋给C
     + =	    加和赋值操作符，它把左操作数和右操作数相加赋值给左操作数	    C + = A等价于C = C + A
     - =	    减和赋值操作符，它把左操作数和右操作数相减赋值给左操作数	    C - = A等价于C = C - A
     * =	    乘和赋值操作符，它把左操作数和右操作数相乘赋值给左操作数	    C * = A等价于C = C * A
     / =	    除和赋值操作符，它把左操作数和右操作数相除赋值给左操作数	    C / = A，C 与 A 同类型时等价于 C = C / A
    （％）=	    取模和赋值操作符，它把左操作数和右操作数取模后赋值给左操作数	C％= A等价于C = C％A
     << =	    左移位赋值运算符	                                            C << = 2等价于C = C << 2
     >> =	    右移位赋值运算符	                                            C >> = 2等价于C = C >> 2
     ＆=	    按位与赋值运算符	                                            C＆= 2等价于C = C＆2
     ^ =	    按位异或赋值操作符	                                            C ^ = 2等价于C = C ^ 2
     | =	    按位或赋值操作符	                                            C | = 2等价于C = C | 2

条件运算符（?:）
    条件运算符也被称为三元运算符。该运算符有3个操作数，并且需要判断布尔表达式的值。该运算符的主要是决定哪个值应该赋值给变量。
    variable x = (expression) ? value if true : value if false

Java运算符优先级
    下列具有最高优先级的运算符在的表的最上面，最低优先级的在表的底部。
        类别	              操作符	                            关联性
        后缀	      () [] . (点操作符)	                        左到右
        一元	      expr++ expr--	                                从左到右
        一元	      ++expr --expr + - ～ ！	                    从右到左
        乘性 	      * /％	                                        左到右
        加性 	      + -	                                        左到右
        移位 	      >> >>>  << 	                                左到右
        关系 	      > >= < <= 	                                左到右
        相等 	      ==  !=	                                    左到右
        按位与	      ＆	                                        左到右
        按位异或	  ^	                                            左到右
        按位或	      |	                                            左到右
        逻辑与	      &&	                                        左到右
        逻辑或	      | |	                                        左到右
        条件	      ？：	                                        从右到左
        赋值	      = + = - = * = / =％= >> = << =＆= ^ = | =	    从右到左
        逗号	      ，	                                         左到右